{"version":3,"sources":["../app.js"],"names":["express","require","bodyParser","http","app","use","json","portNumber","process","env","PORT","database","googleapis","mongoDbUri","Init","get","req","res","send","UrlGoogle","post","GetGoogleAccountFromCode","query","code","resn","status","sendFile","root","__dirname","server","createServer","listen","console","log","err","Utility","Logger","WriteToLog","Error"],"mappings":";;;;AAAA,IAAMA,UAAQC,QAAQ,SAAR,CAAd;AACA,IAAMC,aAAWD,QAAQ,aAAR,CAAjB;AACA,IAAME,OAAKF,QAAQ,MAAR,CAAX;;AAEA,IAAIG,MAAIJ,SAAR;;AAEAI,IAAIC,GAAJ,CAAQH,WAAWI,IAAX,EAAR;;AAEA,IAAIC,aAAWC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAnC;AACA,IAAIC,WAASV,QAAQ,YAAR,CAAb;AACA,IAAIW,aAAWX,QAAQ,cAAR,CAAf;AACA,IAAIY,aAAW,8FAAf;AACA;AACAF,SAASG,IAAT,CAAcD,UAAd;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BAT,IAAIW,GAAJ,CAAQ,YAAR,EAAqB,UAACC,GAAD,EAAKC,GAAL,EAAW;AAC5BA,QAAIC,IAAJ,CAAS,aAAT;AACH,CAFD;;AAIAd,IAAIW,GAAJ,CAAQ,YAAR,EAAqB,UAACC,GAAD,EAAKC,GAAL,EAAW;AAC5BA,QAAIC,IAAJ,CAASN,WAAWO,SAAX,EAAT;AACH,CAFD;;AAIAf,IAAIgB,IAAJ,CAAS,YAAT;AAAA,uEAAsB,iBAAOJ,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAIdA,GAJc;AAAA;AAAA,+BAICL,WAAWS,wBAAX,CAAoCL,IAAIM,KAAJ,CAAUC,IAA9C,CAJD;;AAAA;AAAA;;AAAA,oCAIVL,IAJU;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAQdM,6BAAKC,MAAL,CAAY,GAAZ,EAAiBP,IAAjB,CAAsB,uBAAtB;;AARc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtB;;AAAA;AAAA;AAAA;AAAA;;AAaAd,IAAIW,GAAJ,CAAQ,GAAR,EAAY,UAACC,GAAD,EAAKC,GAAL,EAAW;AACnBA,QAAIS,QAAJ,CAAa,aAAb,EAA2B,EAACC,MAAKC,SAAN,EAA3B;AACH,CAFD;;AAIA,IAAIC,SAAO1B,KAAK2B,YAAL,CAAkB1B,GAAlB,CAAX;;AAEAyB,OAAOE,MAAP,CAAcxB,UAAd,EAA0B,YAAM;AAC5B,QACA;AACIyB,gBAAQC,GAAR,wCAAiD1B,UAAjD;AACH,KAHD,CAIA,OAAM2B,GAAN,EACA;AACIC,gBAAQC,MAAR,CAAeC,UAAf,CAA0BH,GAA1B;AACA,cAAMI,MAAMJ,GAAN,CAAN;AACH;AAEJ,CAXD","file":"app.js","sourcesContent":["const express=require('express');\nconst bodyParser=require('body-parser');\nconst http=require('http');\n\nvar app=express();\n\napp.use(bodyParser.json());\n\nvar portNumber=process.env.PORT || 4242;\nvar database=require('./database');\nvar googleapis=require('./googleapis');\nvar mongoDbUri=\"mongodb://heroku_r07skxkq:f5q4s0fnq1hcpep0lf3n76omnh@ds117849.mlab.com:17849/heroku_r07skxkq\";\n//mongoDbUri=\"mongodb://localhost:27017/GoogleFeed\";\ndatabase.Init(mongoDbUri);\n/*\napp.use(async (req,res,next)=>{\n\n    try\n    {\n        var requestData=`Request:\\nUrl:${req.url}\\nMethod:${req.method}\\nBody:${req.body}\\n*******************************`;\n\n        Utility.Logger.WriteToLog(requestData);\n        let response=await Services.Gatekeeper.Serve(req);\n\n        if(!Utility.Dto.IsGoodResponse(response)){\n            res.send(response);\n            return;\n        }\n\n        next();\n    }\n    catch(err)\n    {\n        Utility.Logger.WriteToLog(err);\n        res.status(500).send(\"Internal server error\");\n    }\n\n});\n*/\n\napp.get('/heartbeat',(req,res)=>{\n    res.send('Api is live');\n});\n\napp.get('/signinurl',(req,res)=>{\n    res.send(googleapis.UrlGoogle());\n});\n\napp.post('/loginSave',async (req,res)=>{\n\n    try\n    {\n        res.send(await googleapis.GetGoogleAccountFromCode(req.query.code));\n    }\n    catch(err)\n    {\n        resn.status(500).send(\"Internal server error\");\n    }\n\n});\n\napp.get(\"/\",(req,res)=>{\n    res.sendFile(\"/index.html\",{root:__dirname});\n});\n\nvar server=http.createServer(app);\n\nserver.listen(portNumber, () => {\n    try\n    {\n        console.log(`Server is up and running on port: ${portNumber}`);\n    }\n    catch(err)\n    {\n        Utility.Logger.WriteToLog(err);\n        throw Error(err);\n    }\n\n});\n"]}