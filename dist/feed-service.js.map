{"version":3,"sources":["../feed-service.js"],"names":["Repository","require","Database","getFeeds","getMany","Feed","IsOccupied","feeds","slice","unlockFeeds","feedIds","index","length","CreateObjectId","_id","$in","save","addFeed","feed","newFeedModel","Data","Type","saveOne","feedAddStatus","module","exports","GetFeeds","UnlockFeeds","AddFeed"],"mappings":";;;;AAAA,IAAIA,aAAWC,QAAQ,eAAR,CAAf;AACA,IAAIC,WAASD,QAAQ,YAAR,CAAb;;AAEA,IAAIE;AAAA,uEAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEOH,WAAWI,OAAX,CAAmBF,SAASG,IAA5B,EAAiC,EAACC,YAAW,KAAZ,EAAjC,CAFP;;AAAA;AAELC,6BAFK;AAAA,yDAIFA,MAAMC,KAAN,CAAY,CAAZ,EAAc,CAAd,CAJE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAT;;AAAA;AAAA;AAAA;AAAA,GAAJ;;AAQA,IAAIC;AAAA,wEAAY,kBAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEZ,6BAAQC,KAAR,GAAc,CAAd,EAAgBA,QAAMD,QAAQE,MAA9B,EAAqCD,OAArC,EAA6C;AACzCD,oCAAQC,KAAR,IAAeT,SAASW,cAAT,CAAwBH,QAAQC,KAAR,CAAxB,CAAf;AACH;;AAJW;AAAA,+BAMIX,WAAWI,OAAX,CAAmBF,SAASG,IAA5B,EAAiC,EAACS,KAAI,EAACC,KAAIL,OAAL,EAAL,EAAjC,CANJ;;AAAA;AAMRH,6BANQ;AAQJI,8BARI,GAQE,CARF;;AAAA;AAAA,8BAQIA,SAAMJ,MAAMK,MARhB;AAAA;AAAA;AAAA;;AASRL,8BAAMI,MAAN,EAAaL,UAAb,GAAwB,KAAxB;;AATQ;AAAA,+BAWFC,MAAMI,MAAN,EAAaK,IAAb,EAXE;;AAAA;AAQuBL,gCARvB;AAAA;AAAA;;AAAA;AAAA,0DAcL,wBAdK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,GAAJ;;AAkBA,IAAIM;AAAA,wEAAQ,kBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAEJC,oCAFI,GAES,IAAIjB,SAASG,IAAb,CAAkB;AAC/Be,kCAAKF,KAAKE,IADqB;AAE/BC,kCAAKH,KAAKG;AAFqB,yBAAlB,CAFT;AAAA;AAAA,+BAOgBrB,WAAWsB,OAAX,CAAmBH,YAAnB,CAPhB;;AAAA;AAOJI,qCAPI;AAAA,0DASD,yBATC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,GAAJ;;AAaAC,OAAOC,OAAP,GAAe;AACXC,cAASvB,QADE;AAEXwB,iBAAYlB,WAFD;AAGXmB,aAAQX;AAHG,CAAf","file":"feed-service.js","sourcesContent":["var Repository=require('./dbfunctions');\nvar Database=require('./database');\n\nvar getFeeds=async ()=>{\n\n    let feeds=await Repository.getMany(Database.Feed,{IsOccupied:false});\n\n    return feeds.slice(0,5);\n\n}\n\nvar unlockFeeds=async (feedIds)=>{\n\n    for(let index=0;index<feedIds.length;index++){\n        feedIds[index]=Database.CreateObjectId(feedIds[index]);\n    }\n\n    let feeds=await Repository.getMany(Database.Feed,{_id:{$in:feedIds}});\n\n    for(let index=0;index<feeds.length;index++){\n        feeds[index].IsOccupied=false;\n\n        await feeds[index].save();\n    }\n\n    return \"Unloacked successfully\";\n\n}\n\nvar addFeed=async(feed)=>{\n\n    var newFeedModel=new Database.Feed({\n        Data:feed.Data,\n        Type:feed.Type\n    });\n\n    let feedAddStatus=await Repository.saveOne(newFeedModel);\n\n    return \"Added feed successfully\";\n\n}\n\nmodule.exports={\n    GetFeeds:getFeeds,\n    UnlockFeeds:unlockFeeds,\n    AddFeed:addFeed\n}"]}