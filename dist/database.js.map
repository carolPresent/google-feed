{"version":3,"sources":["../database.js"],"names":["mongoose","require","Schema","Promise","global","init","dbLink","connect","useNewUrlParser","catch","err","logger","WriteToLog","FeedSchema","Data","type","String","trim","required","Type","IsOccupied","Boolean","default","TokenSchema","AccessToken","RefreshToken","Scope","TokenType","IdToken","index","ExpiryDate","Number","User","ObjectId","ref","UserSchema","Id","unique","Email","Token","CreateObjectId","_id","Types","Feed","model","module","exports","Init"],"mappings":";;AAAA,IAAMA,WAASC,QAAQ,UAAR,CAAf;AACA,IAAIC,SAAOF,SAASE,MAApB;;AAEAF,SAASG,OAAT,GAAiBC,OAAOD,OAAxB;;AAEA,IAAIE,OAAK,SAALA,IAAK,CAASC,MAAT,EAAgB;AACrBN,aAASO,OAAT,CAAiBD,MAAjB,EAAwB,EAAEE,iBAAiB,IAAnB,EAAxB,EAAmDC,KAAnD,CAAyD,UAASC,GAAT,EAAa;AAClEC,eAAOC,UAAP,+DAA8EF,GAA9E;AACH,KAFD;AAGH,CAJD;;AAMA,IAAIG,aAAW,IAAIX,MAAJ,CAAW;AACtBY,UAAK;AACDC,cAAKC,MADJ;AAEDC,cAAK,IAFJ;AAGDC,kBAAS;AAHR,KADiB;AAMtBC,UAAK;AACDJ,cAAKC,MADJ;AAEDC,cAAK;AAFJ,KANiB;AAUtBG,gBAAW;AACPL,cAAKM,OADE;AAEPC,iBAAQ;AAFD;AAVW,CAAX,CAAf;;AAgBA,IAAIC,cAAY,IAAIrB,MAAJ,CAAW;AACvBsB,iBAAY;AACRT,cAAKC;AADG,KADW;AAIvBS,kBAAa;AACTV,cAAKC;AADI,KAJU;AAOvBU,WAAM;AACFX,cAAKC;AADH,KAPiB;AAUvBW,eAAU;AACNZ,cAAKC;AADC,KAVa;AAavBY,aAAQ;AACJb,cAAKC,MADD;AAEJa,eAAM;AAFF,KAbe;AAiBvBC,gBAAW;AACPf,cAAKgB;AADE,KAjBY;AAoBvBC,UAAK;AACDjB,cAAKb,OAAO+B,QADX;AAEDC,aAAI;AAFH;AApBkB,CAAX,CAAhB;;AA0BA,IAAIC,aAAW,IAAIjC,MAAJ,CAAW;AACtBkC,QAAG;AACCrB,cAAKgB,MADN;AAECM,gBAAO;AAFR,KADmB;AAKtBC,WAAM;AACFvB,cAAKC,MADH;AAEFqB,gBAAO;AAFL,KALgB;AAStBE,WAAM;AACFxB,cAAKb,OAAO+B,QADV;AAEFC,aAAI;AAFF;AATgB,CAAX,CAAf;;AAeA,IAAIM,iBAAe,SAAfA,cAAe,CAACC,GAAD,EAAO;;AAEtB,WAAO,IAAIzC,SAAS0C,KAAT,CAAeT,QAAnB,CAA4BQ,GAA5B,CAAP;AACH,CAHD;;AAKA,IAAIE,OAAK3C,SAAS4C,KAAT,CAAe,MAAf,EAAsB/B,UAAtB,CAAT;AACA,IAAI0B,QAAMvC,SAAS4C,KAAT,CAAe,OAAf,EAAuBrB,WAAvB,CAAV;AACA,IAAIS,OAAKhC,SAAS4C,KAAT,CAAe,MAAf,EAAsBT,UAAtB,CAAT;;AAEAU,OAAOC,OAAP,GAAe;AACXC,UAAK1C,IADM;AAEXsC,cAFW;AAGXJ,gBAHW;AAIXP,cAJW;AAKXQ;AALW,CAAf","file":"database.js","sourcesContent":["const mongoose=require('mongoose');\nvar Schema=mongoose.Schema;\n\nmongoose.Promise=global.Promise;\n\nvar init=function(dbLink){\n    mongoose.connect(dbLink,{ useNewUrlParser: true }).catch(function(err){\n        logger.WriteToLog(`Error occurred while establishing connection to mongo db ${err}`);\n    });\n}\n\nvar FeedSchema=new Schema({\n    Data:{\n        type:String,\n        trim:true,\n        required:true\n    },\n    Type:{\n        type:String,\n        trim:true\n    },\n    IsOccupied:{\n        type:Boolean,\n        default:false\n    }\n});\n\nvar TokenSchema=new Schema({\n    AccessToken:{\n        type:String\n    },\n    RefreshToken:{\n        type:String\n    },\n    Scope:{\n        type:String\n    },\n    TokenType:{\n        type:String\n    },\n    IdToken:{\n        type:String,\n        index:true\n    },\n    ExpiryDate:{\n        type:Number\n    },\n    User:{\n        type:Schema.ObjectId,\n        ref:'User'\n    }\n});\n\nvar UserSchema=new Schema({\n    Id:{\n        type:Number,\n        unique:true\n    },\n    Email:{\n        type:String,\n        unique:true\n    },\n    Token:{\n        type:Schema.ObjectId,\n        ref:'Token'\n    }\n});\n\nvar CreateObjectId=(_id)=>{\n\n    return new mongoose.Types.ObjectId(_id);\n}\n\nvar Feed=mongoose.model(\"Feed\",FeedSchema);\nvar Token=mongoose.model(\"Token\",TokenSchema);\nvar User=mongoose.model(\"User\",UserSchema);\n\nmodule.exports={\n    Init:init,\n    Feed,\n    Token,\n    User,\n    CreateObjectId\n};"]}