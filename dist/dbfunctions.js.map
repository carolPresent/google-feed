{"version":3,"sources":["../dbfunctions.js"],"names":["saveOne","entity","save","Error","saveMany","entityType","entityList","insertMany","getByWhereClause","whereClause","$where","getManyPopulated","requestModel","populateQuery","find","populate","getAggregate","aggregateQuery","aggregate","getMany","findByIdAndRemove","id","getByIdPopulated","entityiType","findById","getById","getOne","findOne","updateMany","updateModel","$set","count","condition","countDocuments","any","deleteMany","bulkWrite","ops","module","exports"],"mappings":"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","file":"dbfunctions.js","sourcesContent":["\nvar saveOne = async function(entity){\n\n    try\n    {\n        return await entity.save();\n    }\n    catch(err)\n    {\n        throw Error(err);\n    }\n\n}\n\nvar saveMany = async function(entityType,entityList){\n\n    try\n    {\n        return await entityType.insertMany(entityList);\n    }\n    catch(err)\n    {\n        throw Error(err);\n    }\n\n}\n\nvar getByWhereClause = async function(entity,whereClause){\n\n    try\n    {\n        return await entity.$where(whereClause);\n    }\n    catch(err)\n    {\n        throw Error(err);\n    }\n\n}\n\nvar getManyPopulated = async function(entity,requestModel,populateQuery){\n\n    try\n    {\n        return await entity.find(requestModel).populate(populateQuery);\n    }\n    catch(err)\n    {\n        throw Error(err);\n    }\n\n}\n\nvar getAggregate = async function(entity,aggregateQuery){\n\n    try\n    {\n        return await entity.aggregate(aggregateQuery);\n    }\n    catch(err)\n    {\n        throw Error(err);\n    }\n\n}\n\nvar getMany = async function(entity,requestModel){\n\n    try\n    {\n        return await entity.find(requestModel);\n    }\n    catch(err)\n    {\n        throw Error(err);\n    }\n\n}\n\nvar findByIdAndRemove = async function(entityType,id){\n\n    try\n    {\n        return await entityType.findByIdAndRemove(id);\n    }\n    catch(err)\n    {\n        throw Error(err);\n    }\n\n}\n\nvar getByIdPopulated = async function(entityiType,id,populateQuery){\n\n    try\n    {\n        return await entityiType.findById(id).populate(populateQuery);\n    }\n    catch(err)\n    {\n        throw Error(err);\n    }\n\n}\n\nvar getById = async function(entityType,id){\n\n    try\n    {\n        return await entityType.findById(id);\n    }\n    catch(err)\n    {\n        throw Error(err);\n    }\n\n}\n\nvar getOne = async function(entityType,requestModel){\n\n    try\n    {\n        return await entityType.findOne(requestModel);\n    }\n    catch(err)\n    {\n        throw Error(err);\n    }\n\n}\n\nvar updateMany = async function(entityType,requestModel,updateModel){\n\n    try\n    {\n        return await entityType.updateMany(requestModel,{$set:updateModel});\n    }\n    catch(err)\n    {\n        throw Error(err);\n    }\n\n}\n\nvar count = async function(entityType,condition){\n\n    try\n    {\n        return await entityType.countDocuments(condition);\n    }\n    catch(err)\n    {\n        throw Error(err);\n    }\n\n}\n\nvar any = async function(entityType,condition){\n\n    try\n    {\n        return await entityType.count(condition);\n    }\n    catch(err)\n    {\n        throw Error(err);\n    }\n\n}\n\nvar deleteMany = async function(entityType,condition){\n\n    try\n    {\n        return await entityType.deleteMany(condition);\n    }\n    catch(err)\n    {\n        throw Error(err);\n    }\n\n}\n\nvar bulkWrite = async function (entityType,ops) {\n\n    try\n    {\n        return await entityType.bulkWrite(ops);\n    }\n    catch(err)\n    {\n        throw Error(err);\n    }\n\n}\n\n\nmodule.exports={\n    saveOne,\n    getByWhereClause,\n    getMany,\n    saveMany,\n    findByIdAndRemove,\n    getById,\n    getOne,\n    updateMany,\n    count,\n    deleteMany,\n    any,\n    getManyPopulated,\n    bulkWrite,\n    getAggregate,\n    getByIdPopulated\n};"]}