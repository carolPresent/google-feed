{"version":3,"sources":["../user-service.js"],"names":["Repository","require","Database","saveLoginDetails","data","newTokenModel","Token","AccessToken","access_token","RefreshToken","refresh_token","Scope","scope","TokenType","token_type","IdToken","id_token","ExpiryDate","expiry_date","saveOne","token","getOne","User","Id","id","Email","email","user","newUserModel","_id","deleteMany","save","module","exports","SaveLoginDetails"],"mappings":";;;;AAAA,IAAIA,aAAWC,QAAQ,eAAR,CAAf;AACA,IAAIC,WAASD,QAAQ,YAAR,CAAb;;AAEA,IAAIE;AAAA,uEAAiB,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAEbC,qCAFa,GAEC,IAAIH,SAASI,KAAb,CAAmB;AACjCC,yCAAYH,KAAKI,YADgB;AAEjCC,0CAAaL,KAAKM,aAFe;AAGjCC,mCAAMP,KAAKQ,KAHsB;AAIjCC,uCAAUT,KAAKU,UAJkB;AAKjCC,qCAAQX,KAAKY,QALoB;AAMjCC,wCAAWb,KAAKc;AANiB,yBAAnB,CAFD;AAAA;AAAA,+BAWClB,WAAWmB,OAAX,CAAmBd,aAAnB,CAXD;;AAAA;AAWbe,6BAXa;AAAA;AAAA,+BAaDpB,WAAWqB,MAAX,CAAkBnB,SAASoB,IAA3B,EAAgC,EAACC,IAAGnB,KAAKoB,EAAT,EAAYC,OAAMrB,KAAKsB,KAAvB,EAAhC,CAbC;;AAAA;AAabC,4BAba;;AAAA,8BAedA,QAAM,IAfQ;AAAA;AAAA;AAAA;;AAiBTC,oCAjBS,GAiBI,IAAI1B,SAASoB,IAAb,CAAkB;AAC/BC,gCAAGnB,KAAKoB,EADuB;AAE/BC,mCAAMrB,KAAKsB,KAFoB;AAG/BpB,mCAAMc,MAAMS;AAHmB,yBAAlB,CAjBJ;AAAA;AAAA,+BAuBP7B,WAAWmB,OAAX,CAAmBS,YAAnB,CAvBO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,+BA2BP5B,WAAW8B,UAAX,CAAsB5B,SAASI,KAA/B,EAAqC,EAACuB,KAAIF,KAAKrB,KAAV,EAArC,CA3BO;;AAAA;;AA6BbqB,6BAAKrB,KAAL,GAAWc,MAAMS,GAAjB;;AA7Ba;AAAA,+BA+BPF,KAAKI,IAAL,EA/BO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;AAAA,GAAJ;;AAqCAC,OAAOC,OAAP,GAAe;AACXC,sBAAiB/B;AADN,CAAf","file":"user-service.js","sourcesContent":["var Repository=require('./dbfunctions');\nvar Database=require('./database');\n\nvar saveLoginDetails=async (data)=>{\n\n    var newTokenModel=new Database.Token({\n        AccessToken:data.access_token,\n        RefreshToken:data.refresh_token,\n        Scope:data.scope,\n        TokenType:data.token_type,\n        IdToken:data.id_token,\n        ExpiryDate:data.expiry_date\n    });\n\n    let token = await Repository.saveOne(newTokenModel);\n\n    let user= await Repository.getOne(Database.User,{Id:data.id,Email:data.email});\n\n    if(user==null){\n\n        let newUserModel=new Database.User({\n            Id:data.id,\n            Email:data.email,\n            Token:token._id\n        });\n\n        await Repository.saveOne(newUserModel);\n\n    }else{\n\n        await Repository.deleteMany(Database.Token,{_id:user.Token});\n\n        user.Token=token._id;\n\n        await user.save();\n\n    }\n    \n}\n\nmodule.exports={\n    SaveLoginDetails:saveLoginDetails\n}"]}